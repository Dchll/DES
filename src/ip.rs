pub fn ip(data: &[u8]) -> Vec<u8> {
    if data.len() < 64 {
        panic!("data.len() = {}, must be 64", data.len());
    }
    let mut ip_data = Vec::<u8>::with_capacity(64);
    let ip_rule = [
        58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14,
        6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11,
        3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7,
    ];

    for i in ip_rule {
        ip_data.push(data[i - 1]);
    }

    ip_data
}

pub fn ip_1(data: &[u8]) -> Vec<u8> {
    if data.len() < 64 {
        panic!("data.len() = {}, must be 64", data.len());
    }
    let mut ip_data = Vec::<u8>::with_capacity(64);
    let ip_rule = [
        40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62,
        30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19,
        59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25,
    ];

    for i in ip_rule {
        ip_data.push(data[i - 1]);
    }

    ip_data
}

#[cfg(test)]
mod test {
    use crate::ip::*;

    #[test]
    fn ip_work() {
        let mut data: Vec<u8> = Vec::with_capacity(64);
        for i in 0..64 {
            data.push(i);
        }
        // println!("{:?}", ip(&data));
        assert_eq!(
            ip(&data),
            [
                57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29,
                21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7, 56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42,
                34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6,
            ]
        );
    }

    #[test]
    fn ip_1_work() {
        let mut data: Vec<u8> = vec![
            57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21,
            13, 5, 63, 55, 47, 39, 31, 23, 15, 7, 56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26,
            18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6,
        ];
        // println!("{:?}", ip_1(&data));
        assert_eq!(
            ip_1(&data),
            [
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
                23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
                44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63
            ]
        );
    }
}
